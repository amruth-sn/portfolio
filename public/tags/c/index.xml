<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on amruthn.com</title>
    <link>//localhost:64634/tags/c/</link>
    <description>Recent content in C on amruthn.com</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:64634/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>file system</title>
      <link>//localhost:64634/projects/file_system/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:64634/projects/file_system/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;overview&lt;/h1&gt;&#xA;&lt;p&gt;a c-based implementation of a simplified file system. it mimics a windows-style FAT (file allocation table) architecture and supports core file ops like creating, reading, writing, deleting, and managing file descriptors. the project simulates a virtual disk environment for testing too.&lt;/p&gt;&#xA;&lt;h1 id=&#34;implementation&#34;&gt;implementation&lt;/h1&gt;&#xA;&lt;p&gt;several key components:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;superblock&lt;/strong&gt;: holds metadata about the file system layout, including directory and FAT sizes, and the starting block of data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;directory&lt;/strong&gt;: a statically allocated array that can hold up to 64 files, each entry storing file metadata like name, size, existence flag, reference count, and starting block.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;FAT&lt;/strong&gt;: an array of 8192 integers representing the file allocation table, where each entry points to the next block in a file or indicates the end of a file.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;file descriptor table&lt;/strong&gt;: manages open files with entries containing an offset, a usage flag, and an index linking to the directory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;fs_buffer&lt;/strong&gt;: a fixed-size buffer (4096 bytes) used for file system operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;core-functions&#34;&gt;core functions&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;make_fs()&lt;/code&gt;: initializes the virtual disk, sets up the superblock, FAT, and directory, and writes them to disk.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mount_fs()&lt;/code&gt;: loads the file system from disk into memory, reading the superblock, FAT, and directory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;umount_fs()&lt;/code&gt;: writes the in-memory structures back to disk and closes the virtual disk.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fs_create()&lt;/code&gt;: creates a new file, ensuring the name is valid and not already in use, and allocates a starting block in the FAT.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fs_open()&lt;/code&gt;: opens an existing file by finding an available file descriptor and updating the reference count.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fs_close()&lt;/code&gt;: closes an open file descriptor and decrements the corresponding reference count.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fs_write()&lt;/code&gt; / &lt;code&gt;fs_read()&lt;/code&gt;: handles writing to and reading from files, managing offsets and traversing the FAT as needed.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fs_delete()&lt;/code&gt;: removes a file by clearing its directory entry and freeing its blocks in the FAT.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;future&#34;&gt;future&lt;/h1&gt;&#xA;&lt;p&gt;definitely room for adding concurrent access controls.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pthreads library</title>
      <link>//localhost:64634/projects/pthreads/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:64634/projects/pthreads/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;overview&lt;/h1&gt;&#xA;&lt;p&gt;this repo is a custom threading library built in c, designed to mimic core pthread functionality from scratch. it reimplements  threading primitives like &lt;code&gt;pthread_create&lt;/code&gt;, &lt;code&gt;pthread_join&lt;/code&gt;, and &lt;code&gt;pthread_exit&lt;/code&gt;, along with basic semaphore support. this project definitely helped me explore how user-level threading and synchronization can be manually orchestrated in a unix-like environment.&lt;/p&gt;&#xA;&lt;h1 id=&#34;architecture&#34;&gt;architecture&lt;/h1&gt;&#xA;&lt;p&gt;the core of the system revolves around a thread control block (TCB) array that can manage up to 128 threads. each TCB stores metadata like thread id, execution status (&lt;code&gt;ready&lt;/code&gt;, &lt;code&gt;running&lt;/code&gt;, &lt;code&gt;blocked&lt;/code&gt;, &lt;code&gt;exited&lt;/code&gt;), a &lt;code&gt;jmp_buf&lt;/code&gt; for context switching, and a pointer to its allocated stack. there is also a global variable tracks the currently running thread and a signal-based timer (&lt;code&gt;sigalrm&lt;/code&gt;) triggers context switches every 50ms via a scheduler function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>shell</title>
      <link>//localhost:64634/projects/shell/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:64634/projects/shell/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;overview&lt;/h1&gt;&#xA;&lt;p&gt;a custom-built shell written in c. replicates the core functionality of a unix shell, supporting features like command execution, piping, file redirection, and background process management. helped me understand how shells work under the hood.&lt;/p&gt;&#xA;&lt;h1 id=&#34;features&#34;&gt;features&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;command execution&lt;/strong&gt;: runs both built-in and external commands.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;piping&lt;/strong&gt;: allows the output of one command to be used as the input for another.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;file redirection&lt;/strong&gt;: supports input (&lt;code&gt;&amp;lt;&lt;/code&gt;) and output (&lt;code&gt;&amp;gt;&lt;/code&gt;) redirection.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;background processes&lt;/strong&gt;: enables commands to run in the background using &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;implementation&#34;&gt;implementation&lt;/h1&gt;&#xA;&lt;p&gt;the shell uses system calls like &lt;code&gt;fork()&lt;/code&gt;, &lt;code&gt;exec()&lt;/code&gt;, and &lt;code&gt;wait()&lt;/code&gt; to manage processes. it parses user input to identify commands, arguments, and special characters for piping or redirection. for piping, it sets up pipes between processes. for redirection, it manipulates file descriptors to read from or write to files. background processes are handled by forking without waiting for the child process to finish.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
